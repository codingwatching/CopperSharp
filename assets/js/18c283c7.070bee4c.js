"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4971],{3905:function(e,a,t){t.d(a,{Zo:function(){return h},kt:function(){return k}});var l=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function n(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);a&&(l=l.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,l)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?n(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function c(e,a){if(null==e)return{};var t,l,r=function(e,a){if(null==e)return{};var t,l,r={},n=Object.keys(e);for(l=0;l<n.length;l++)t=n[l],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(l=0;l<n.length;l++)t=n[l],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=l.createContext({}),o=function(e){var a=l.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},h=function(e){var a=o(e.components);return l.createElement(p.Provider,{value:a},e.children)},s={inlineCode:"code",wrapper:function(e){var a=e.children;return l.createElement(l.Fragment,{},a)}},d=l.forwardRef((function(e,a){var t=e.components,r=e.mdxType,n=e.originalType,p=e.parentName,h=c(e,["components","mdxType","originalType","parentName"]),d=o(t),k=r,u=d["".concat(p,".").concat(k)]||d[k]||s[k]||n;return t?l.createElement(u,i(i({ref:a},h),{},{components:t})):l.createElement(u,i({ref:a},h))}));function k(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var n=t.length,i=new Array(n);i[0]=d;var c={};for(var p in a)hasOwnProperty.call(a,p)&&(c[p]=a[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var o=2;o<n;o++)i[o]=t[o];return l.createElement.apply(null,i)}return l.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7915:function(e,a,t){t.r(a),t.d(a,{frontMatter:function(){return c},contentTitle:function(){return p},metadata:function(){return o},toc:function(){return h},default:function(){return d}});var l=t(7462),r=t(3366),n=(t(7294),t(3905)),i=["components"],c={title:"Namespace CopperSharp.Block.Data",sidebar_label:"Index",sidebar_position:0},p="Namespace CopperSharp.Block.Data",o={unversionedId:"api/CopperSharp.Block.Data/CopperSharp.Block.Data",id:"api/CopperSharp.Block.Data/CopperSharp.Block.Data",title:"Namespace CopperSharp.Block.Data",description:"Classes",source:"@site/docs/api/CopperSharp.Block.Data/CopperSharp.Block.Data.md",sourceDirName:"api/CopperSharp.Block.Data",slug:"/api/CopperSharp.Block.Data/",permalink:"/docs/api/CopperSharp.Block.Data/",editUrl:"https://github.com/Maxuss/CopperSharp/docs/api/CopperSharp.Block.Data/CopperSharp.Block.Data.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"Namespace CopperSharp.Block.Data",sidebar_label:"Index",sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"BlockState",permalink:"/docs/api/CopperSharp.Block/BlockState"},next:{title:"AbstractBlockData",permalink:"/docs/api/CopperSharp.Block.Data/AbstractBlockData"}},h=[{value:"Classes",id:"classes",children:[{value:"AbstractBlockData",id:"abstractblockdata",children:[],level:3}],level:2},{value:"Structs",id:"structs",children:[{value:"BlockFace",id:"blockface",children:[],level:3}],level:2},{value:"Interfaces",id:"interfaces",children:[{value:"IAgeable",id:"iageable",children:[],level:3},{value:"IAttachable",id:"iattachable",children:[],level:3},{value:"IBisected",id:"ibisected",children:[],level:3},{value:"IBlockData",id:"iblockdata",children:[],level:3},{value:"IDirectional",id:"idirectional",children:[],level:3},{value:"IFaceAttachable",id:"ifaceattachable",children:[],level:3},{value:"ILevelled",id:"ilevelled",children:[],level:3},{value:"ILightable",id:"ilightable",children:[],level:3},{value:"IMultipleFacing",id:"imultiplefacing",children:[],level:3},{value:"IOpenable",id:"iopenable",children:[],level:3},{value:"IOrientable",id:"iorientable",children:[],level:3},{value:"IPowerable",id:"ipowerable",children:[],level:3},{value:"IRotatable",id:"irotatable",children:[],level:3},{value:"ISignalEmitter",id:"isignalemitter",children:[],level:3},{value:"ISnowable",id:"isnowable",children:[],level:3},{value:"IWaterlogged",id:"iwaterlogged",children:[],level:3}],level:2},{value:"Enums",id:"enums",children:[{value:"Axis",id:"axis",children:[],level:3},{value:"IBisected.Half",id:"ibisectedhalf",children:[],level:3},{value:"IFaceAttachable.Face",id:"ifaceattachableface",children:[],level:3}],level:2}],s={toc:h};function d(e){var a=e.components,t=(0,r.Z)(e,i);return(0,n.kt)("wrapper",(0,l.Z)({},s,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"namespace-coppersharpblockdata"},"Namespace CopperSharp.Block.Data"),(0,n.kt)("h2",{id:"classes"},"Classes"),(0,n.kt)("h3",{id:"abstractblockdata"},(0,n.kt)("a",{parentName:"h3",href:"../CopperSharp.Block.Data/AbstractBlockData"},"AbstractBlockData")),(0,n.kt)("p",null,"Abstract implementation for block entity"),(0,n.kt)("h2",{id:"structs"},"Structs"),(0,n.kt)("h3",{id:"blockface"},(0,n.kt)("a",{parentName:"h3",href:"../CopperSharp.Block.Data/BlockFace"},"BlockFace")),(0,n.kt)("p",null,"Represents side the block is facing"),(0,n.kt)("h2",{id:"interfaces"},"Interfaces"),(0,n.kt)("h3",{id:"iageable"},(0,n.kt)("a",{parentName:"h3",href:"../CopperSharp.Block.Data/IAgeable"},"IAgeable")),(0,n.kt)("p",null,"Represents a tile entity that can have age"),(0,n.kt)("h3",{id:"iattachable"},(0,n.kt)("a",{parentName:"h3",href:"../CopperSharp.Block.Data/IAttachable"},"IAttachable")),(0,n.kt)("p",null,"Represents a tile entity that can be attached to a block"),(0,n.kt)("h3",{id:"ibisected"},(0,n.kt)("a",{parentName:"h3",href:"../CopperSharp.Block.Data/IBisected"},"IBisected")),(0,n.kt)("p",null,"Represents a bisected entity, that is split into two parts"),(0,n.kt)("h3",{id:"iblockdata"},(0,n.kt)("a",{parentName:"h3",href:"../CopperSharp.Block.Data/IBlockData"},"IBlockData")),(0,n.kt)("p",null,"A global abstract superclass for all block entities"),(0,n.kt)("h3",{id:"idirectional"},(0,n.kt)("a",{parentName:"h3",href:"../CopperSharp.Block.Data/IDirectional"},"IDirectional")),(0,n.kt)("p",null,"Represents a block entity that has different directions"),(0,n.kt)("h3",{id:"ifaceattachable"},(0,n.kt)("a",{parentName:"h3",href:"../CopperSharp.Block.Data/IFaceAttachable"},"IFaceAttachable")),(0,n.kt)("p",null,"Represents a tile entity that can be attached to a block","'","s face"),(0,n.kt)("h3",{id:"ilevelled"},(0,n.kt)("a",{parentName:"h3",href:"../CopperSharp.Block.Data/ILevelled"},"ILevelled")),(0,n.kt)("p",null,"Represents a tile entity that can have level containers"),(0,n.kt)("h3",{id:"ilightable"},(0,n.kt)("a",{parentName:"h3",href:"../CopperSharp.Block.Data/ILightable"},"ILightable")),(0,n.kt)("p",null,"Represents a lightable tile entity"),(0,n.kt)("h3",{id:"imultiplefacing"},(0,n.kt)("a",{parentName:"h3",href:"../CopperSharp.Block.Data/IMultipleFacing"},"IMultipleFacing")),(0,n.kt)("p",null,"Represents a tile entity that can have multiple attached faces"),(0,n.kt)("h3",{id:"iopenable"},(0,n.kt)("a",{parentName:"h3",href:"../CopperSharp.Block.Data/IOpenable"},"IOpenable")),(0,n.kt)("p",null,"Represents a tile entity that can be opened"),(0,n.kt)("h3",{id:"iorientable"},(0,n.kt)("a",{parentName:"h3",href:"../CopperSharp.Block.Data/IOrientable"},"IOrientable")),(0,n.kt)("p",null,"Represents an orientable tile entity"),(0,n.kt)("h3",{id:"ipowerable"},(0,n.kt)("a",{parentName:"h3",href:"../CopperSharp.Block.Data/IPowerable"},"IPowerable")),(0,n.kt)("p",null,"Represents a tile entity that can have powered state"),(0,n.kt)("h3",{id:"irotatable"},(0,n.kt)("a",{parentName:"h3",href:"../CopperSharp.Block.Data/IRotatable"},"IRotatable")),(0,n.kt)("p",null,"Represents a rotatable tile entity"),(0,n.kt)("h3",{id:"isignalemitter"},(0,n.kt)("a",{parentName:"h3",href:"../CopperSharp.Block.Data/ISignalEmitter"},"ISignalEmitter")),(0,n.kt)("p",null,"Represents a tile entity that can emit analogue signal"),(0,n.kt)("h3",{id:"isnowable"},(0,n.kt)("a",{parentName:"h3",href:"../CopperSharp.Block.Data/ISnowable"},"ISnowable")),(0,n.kt)("p",null,"Represents a tile entity that can be snowy"),(0,n.kt)("h3",{id:"iwaterlogged"},(0,n.kt)("a",{parentName:"h3",href:"../CopperSharp.Block.Data/IWaterlogged"},"IWaterlogged")),(0,n.kt)("p",null,"Represents a waterlogged block entity"),(0,n.kt)("h2",{id:"enums"},"Enums"),(0,n.kt)("h3",{id:"axis"},(0,n.kt)("a",{parentName:"h3",href:"../CopperSharp.Block.Data/Axis"},"Axis")),(0,n.kt)("p",null,"Represents axis in the world"),(0,n.kt)("h3",{id:"ibisectedhalf"},(0,n.kt)("a",{parentName:"h3",href:"../CopperSharp.Block.Data/IBisected.Half"},"IBisected.Half")),(0,n.kt)("p",null,"Type of bisected half"),(0,n.kt)("h3",{id:"ifaceattachableface"},(0,n.kt)("a",{parentName:"h3",href:"../CopperSharp.Block.Data/IFaceAttachable.Face"},"IFaceAttachable.Face")),(0,n.kt)("p",null,"Type of attached face"))}d.isMDXComponent=!0}}]);